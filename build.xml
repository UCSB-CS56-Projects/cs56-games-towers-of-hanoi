<project default="compile">

  <!-- build.xml for TowersOfHanoiState, S13, CS56
       name: Roeland Singer-Heinze -->

   <property environment="env"/> <!-- load the environment variables --> 

   <property name="webRoot" value="${env.HOME}/public_html/cs56" />
   <property name="webBaseURL" value="http://www.cs.ucsb.edu/~${env.USER}/cs56" />
   <property name="projectName" value="cs56-games-towers-of-hanoi" /> 
   <property name="javadocDest" value="${webRoot}/${projectName}/javadoc" /> 
   <property name="javadocURL" value="${webBaseURL}/${projectName}/javadoc" /> 
   <property name="javadocLink" value="http://java.sun.com/javase/8/docs/api/" />
   <property name="packagePrefix" value="edu.ucsb.cs56.projects.games.towers_of_hanoi" />
   <property name="viewPackagePrefix" value="${packagePrefix}.view" />

   <property name="timerPackagePrefix" value="${packagePrefix}.utility" />

<path id="project.class.path">
         <pathelement location="build"/>
         <pathelement location="lib/junit-4.8.2.jar"/>
</path> 

<target name="compile" description="compile the projects" >
  <mkdir dir="build" />
  <javac srcdir="src" destdir="build" debug="true" debuglevel="lines,vars,source" includeantruntime="false">
  <classpath refid="project.class.path" />                       
  </javac>       
</target>

<target name="run-timer" depends="compile" description="run the timer demo">
  <!-- You can use exec here, depending on your needs -->
  <java classname="${timerPackagePrefix}.HanoiTimerGUI" classpathref="project.class.path" fork="true">
  </java>
</target>

<target name="run-GUI" depends="compile" description="run the game in full GUI">
  <java classname="${timerPackagePrefix}.GUIMain" classpathref="project.class.path" fork="true">
  </java>
</target>

<target name="run" depends="compile, input-runargs" description="run the project">
  <!-- You can use exec here, depending on your needs -->
  <java classname="${viewPackagePrefix}.CmdLineHanoi" classpathref="project.class.path" fork="true">
  <arg line="${args}"/>
  </java>
</target>

<target name="input-runargs" unless="args" description="prompts for command line arguments if necessary">
  <input addProperty="args" message="Enter the number of disks, Between 3 and 25:"/>
</target>

<target name="clean" description="delete unnecessary files and directories">
  <delete dir="build" quiet="true" />
  <delete dir="javadoc" quiet="true" />
</target>
  <property name ="javadoc_path" location = "javadoc"/>
  <property name ="public_javadoc_path" location= "../cs56-games-towers-of-hanoi-javadoc/javadoc"/>  
<target name="javadoc" depends="compile" description = "generate javadoc">
  <delete dir="javadoc" quiet="true" />
  <javadoc  destdir="javadoc" author="true" version="true" use="true" >
  <fileset dir="src" includes="**/*.java"/>
  <link href="https://docs.oracle.com/javase/8/docs/api/" />
  </javadoc>                                                    
	<echo>
		javadoc written to file://${javadoc_path}/index.html
		copying to ${public_javadoc_path}/index.html
	</echo>
	<delete quiet = "true">
		<fileset dir = "${public_javadoc_path}" />
	</delete>
	<mkdir dir = "${public_javdoc_path}" />
	<copy todir = "${public_javadoc_path}">
		<fileset dir ="javadoc" />
	</copy>
	<echo>
		javdoc copied to ${public_javadoc_path}/index.hml
		TO PUBLISH: cd into that repo, then git add javadoc;
		git commit -m "update javadoc"; git push origin master
	</echo>
   </target>    

  <target name="test" depends="compile" description="tests the project">

    <junit haltonerror="no" haltonfailure="no">
       <classpath refid="project.class.path" />
       <batchtest fork="yes">
          <fileset dir="src">
            <!-- this will pick up every class with a name ending in Test -->
            <include name="**/*Test.java"/>
          </fileset>
       </batchtest>
        <formatter type="plain" usefile="false" /> 
    </junit>
  </target>

</project>
